// Code generated by MockGen. DO NOT EDIT.
// Source: repositories.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	entity "dev/test-x-tech/internal/entity"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
)

// MockBtcUsder is a mock of BtcUsder interface.
type MockBtcUsder struct {
	ctrl     *gomock.Controller
	recorder *MockBtcUsderMockRecorder
}

// MockBtcUsderMockRecorder is the mock recorder for MockBtcUsder.
type MockBtcUsderMockRecorder struct {
	mock *MockBtcUsder
}

// NewMockBtcUsder creates a new mock instance.
func NewMockBtcUsder(ctrl *gomock.Controller) *MockBtcUsder {
	mock := &MockBtcUsder{ctrl: ctrl}
	mock.recorder = &MockBtcUsderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBtcUsder) EXPECT() *MockBtcUsderMockRecorder {
	return m.recorder
}

// HistoryBtcUsd mocks base method.
func (m *MockBtcUsder) HistoryBtcUsd(dateTime string, limit, page int) (*entity.BTCUSDTResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HistoryBtcUsd", dateTime, limit, page)
	ret0, _ := ret[0].(*entity.BTCUSDTResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HistoryBtcUsd indicates an expected call of HistoryBtcUsd.
func (mr *MockBtcUsderMockRecorder) HistoryBtcUsd(dateTime, limit, page interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HistoryBtcUsd", reflect.TypeOf((*MockBtcUsder)(nil).HistoryBtcUsd), dateTime, limit, page)
}

// LastBtcUsd mocks base method.
func (m *MockBtcUsder) LastBtcUsd() (*entity.BTCUSDTResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LastBtcUsd")
	ret0, _ := ret[0].(*entity.BTCUSDTResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LastBtcUsd indicates an expected call of LastBtcUsd.
func (mr *MockBtcUsderMockRecorder) LastBtcUsd() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LastBtcUsd", reflect.TypeOf((*MockBtcUsder)(nil).LastBtcUsd))
}

// TakeBtcUsd mocks base method.
func (m *MockBtcUsder) TakeBtcUsd(periodicity time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TakeBtcUsd", periodicity)
	ret0, _ := ret[0].(error)
	return ret0
}

// TakeBtcUsd indicates an expected call of TakeBtcUsd.
func (mr *MockBtcUsderMockRecorder) TakeBtcUsd(periodicity interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TakeBtcUsd", reflect.TypeOf((*MockBtcUsder)(nil).TakeBtcUsd), periodicity)
}

// MockCurrencer is a mock of Currencer interface.
type MockCurrencer struct {
	ctrl     *gomock.Controller
	recorder *MockCurrencerMockRecorder
}

// MockCurrencerMockRecorder is the mock recorder for MockCurrencer.
type MockCurrencerMockRecorder struct {
	mock *MockCurrencer
}

// NewMockCurrencer creates a new mock instance.
func NewMockCurrencer(ctrl *gomock.Controller) *MockCurrencer {
	mock := &MockCurrencer{ctrl: ctrl}
	mock.recorder = &MockCurrencerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCurrencer) EXPECT() *MockCurrencerMockRecorder {
	return m.recorder
}

// HistoryCurrency mocks base method.
func (m *MockCurrencer) HistoryCurrency(date string, limit, page int, CurrencySlice []string) (entity.CurrencyResponseInt, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HistoryCurrency", date, limit, page, CurrencySlice)
	ret0, _ := ret[0].(entity.CurrencyResponseInt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HistoryCurrency indicates an expected call of HistoryCurrency.
func (mr *MockCurrencerMockRecorder) HistoryCurrency(date, limit, page, CurrencySlice interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HistoryCurrency", reflect.TypeOf((*MockCurrencer)(nil).HistoryCurrency), date, limit, page, CurrencySlice)
}

// LastCurrency mocks base method.
func (m *MockCurrencer) LastCurrency() (entity.CurrencyDec, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LastCurrency")
	ret0, _ := ret[0].(entity.CurrencyDec)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LastCurrency indicates an expected call of LastCurrency.
func (mr *MockCurrencerMockRecorder) LastCurrency() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LastCurrency", reflect.TypeOf((*MockCurrencer)(nil).LastCurrency))
}

// TakeCurrency mocks base method.
func (m *MockCurrencer) TakeCurrency(periodicity time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TakeCurrency", periodicity)
	ret0, _ := ret[0].(error)
	return ret0
}

// TakeCurrency indicates an expected call of TakeCurrency.
func (mr *MockCurrencerMockRecorder) TakeCurrency(periodicity interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TakeCurrency", reflect.TypeOf((*MockCurrencer)(nil).TakeCurrency), periodicity)
}

// MockLatester is a mock of Latester interface.
type MockLatester struct {
	ctrl     *gomock.Controller
	recorder *MockLatesterMockRecorder
}

// MockLatesterMockRecorder is the mock recorder for MockLatester.
type MockLatesterMockRecorder struct {
	mock *MockLatester
}

// NewMockLatester creates a new mock instance.
func NewMockLatester(ctrl *gomock.Controller) *MockLatester {
	mock := &MockLatester{ctrl: ctrl}
	mock.recorder = &MockLatesterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLatester) EXPECT() *MockLatesterMockRecorder {
	return m.recorder
}

// Latest mocks base method.
func (m *MockLatester) Latest() (entity.CurrencyDec, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Latest")
	ret0, _ := ret[0].(entity.CurrencyDec)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Latest indicates an expected call of Latest.
func (mr *MockLatesterMockRecorder) Latest() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Latest", reflect.TypeOf((*MockLatester)(nil).Latest))
}
